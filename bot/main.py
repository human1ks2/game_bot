import asyncio
import logging
import os
import re
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
main_menu_kb = InlineKeyboardMarkup(row_width=2)
main_menu_kb.add(
    InlineKeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", callback_data="register"),
    InlineKeyboardButton("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="instruction")
)
main_menu_kb.add(InlineKeyboardButton("üÜò HELP", url="https://t.me/your_support_bot"))
main_menu_kb.add(InlineKeyboardButton("üöÄ –ü–û–õ–£–ß–ò–¢–¨ –°–ò–ì–ù–ê–õ", web_app=types.WebAppInfo(url="https://hostscore.ru")))


# –ú–µ–Ω—é –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
registration_error_kb = InlineKeyboardMarkup(row_width=1)
registration_error_kb.add(
    InlineKeyboardButton("üîÅ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è", callback_data="register"),
    InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
)

# –ú–µ–Ω—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
instruction_kb = InlineKeyboardMarkup()
instruction_kb.add(InlineKeyboardButton("üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu"))


@dp.message_handler(commands=["start"])
async def start_command(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=main_menu_kb)


@dp.callback_query_handler(lambda c: c.data == "register")
async def handle_registration(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(
        text="‚ùå –û—à–∏–±–∫–∞, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞.",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=registration_error_kb
    )


@dp.callback_query_handler(lambda c: c.data == "instruction")
async def handle_instruction(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(
        text="üìò –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:\n1. –ù–∞–∂–º–∏—Ç–µ \"–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\"\n2. –°–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º –Ω–∞ —Å–∞–π—Ç–µ\n3. –ü–æ—Å–ª–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º.",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=instruction_kb
    )


@dp.callback_query_handler(lambda c: c.data == "main_menu")
async def back_to_main_menu(callback_query: types.CallbackQuery):
    await bot.answer_callback_query(callback_query.id)
    await bot.edit_message_text(
        text="üè† –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        chat_id=callback_query.message.chat.id,
        message_id=callback_query.message.message_id,
        reply_markup=main_menu_kb
    )

if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    executor.start_polling(dp, skip_updates=True)
